1. Convert the following array notation to pointer notation given the following variable 
definitions (see question 2 for the appropriate notation for your answers).
int integers[10];
char chars[15];
1. integers[4] = i+4*sizeof(int)  OR i+4*sizeof(i[0]) OR *(integers+4)
2. chars[11] = c+11*sizeof(char) OR c+11*sizeof(c[0]) OR *(chars+11)
3. chars[0] = c+0*sizeof(char) OR c+0*sizeof(c[0]) OR *(chars+0)

---------------------
2. Convert the following pointer notation to array notation given the following variable 
definitions.
int integers[10];
char chars[15];
1. *(chars + 5) = chars[5]
2. *(integers + 2) = integers[2]
3. *chars = chars[0]

---------------------
3. Write a C program that defines the string array animals as shown below. Based on the 
values of animals[3][0], animals[0][11], animals[3][-6], draw a picture of what the memory 
allocated for animals looks like:
char * animals[] = {"Bear\0", "Bat\0", "Tiger\0", "Cat\0"}; 
The answer can vary from one compiler to another. 
Can you think of another possible arrangement of the strings in memory?
The characters are stored in one long string, not in seperate locations, rows, or any other structure.
In memory, we get something like 
memory (no spaces): "B  e  a  r  \0  \0  B  a  t  \0  \0  T  i  g  e  r  \0  \0  C  a  t  \0  \0"
 First index      :  0  0  0  0  0   0   1  1  1  1   1   2  2  2  2  2   2   2  3  3  3   3   3
 Second index     :  0  1  2  3  4   5   6  7  8  9   10 11 12 13 14 15  16  17 18 19 20  21  22
[3][0] is C
[0][11] is T
[3][-6] is i
---------------------
4. What are the values of the variables x and y after the execution of the code bellow:
int x = 5, y = 6;
int * p, q;
p = &x;
q = &y;
x = 2*(*q) + *p;
q = p;
*q = x + y;

Assuming you fix the compilation error on "'int * p, q;"
x = 23
y = 6 
If you don't use "int *p; int *q;" then it won't compile so they have no values.

---------------------
5. What are the values to which p and q point after the execution of the code bellow:
int x = 5, i;
int * p, q;
q = malloc(x*sizeof(int));
p = q + 4;
for (i = 0; i < x; i++) q[i] = i;

Assuming you fix the compilation error on "'int * p, q;"
p will point to element 0 of q (value 0)
q will point to element 4 of p (value 4)
Technically they point to memory locations that hold some value (int this case ints).
If you don't use "int *p; int *q;" then it won't compile so they have no values.

---------------------
6. Write a program that takes any number of “integer” arguments from the command line 
(see this link); converts them to true integers (using atoi); stores them in a dynamically 
allocated array of the appropriate size; scans through the array to find the sum of all 
entries, the min, and the max. Example output:
~$ ./my_program 2 1 3 5 4
Sum: 15
Min: 1
Max: 5
integer_functions.c