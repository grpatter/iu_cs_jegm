#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <fstream>
#include <string>//to support strings
#include <vector>//to support vecs
#include <sstream>
#include <cctype>
#include <ctype.h>
#include <unistd.h>
#include <netdb.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/udp.h>
#include <arpa/inet.h>
#include <sys/param.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>

#include "parse_config_file.hpp"
#include "time_func.hpp"
//#include "search_func.hpp"

#define BUFLEN 512
#define NPACK 10
#define PORT 8660
#define SRV_IP "129.79.245.108"
static ofstream out_stream;
static int global_bufsize;
void rmode();
void hmode();
void diep(char *s);
void msleep(int s);

using namespace std;

void msleep(int s){
  usleep(s * 1000);
}

int main(int argc, char* argv[]){
  global_bufsize = 1000 + sizeof(our_ip) + sizeof(our_udp);
  //admin log stuff
  string log_name = "AdminLog";
  log_name += file_name_time();
  cout<<"Starting up SoftRouter Network..."<<endl;
  read_cfg();
  cout<<"Configuration processing complete. Now determining machine IP..."<<endl;
  string myip = this_ip();
  cout<<"Now determining host or router mode..."<<endl;  
  int mode = 0;
  if(search_routers(myip)){	mode = 1; }else{ mode = 0; }  
  
  log_name += "-";
  string mde;
  stringstream lg;
  lg<<mode;
  mde = lg.str();
  log_name += mde;
  log_name += ".txt";
  out_stream.open(log_name.c_str());
  if(out_stream.fail()){
    cout<<"Output file opening failed.\n";
  }
  out_stream<<"BEGIN Administrative log for Virtual Router. (C) Greg Patterson and Eric Spencer 2009 \n"<<endl;
  out_stream<<"MODE is:"<<mode<<endl;
  
  if(mode == 1){
    cout<<"Now starting Router mode..."<<endl;
	rmode();
  }else{
    cout<<"Now starting EndHost mode..."<<endl;
	hmode();
  }
  out_stream.close();
  return 0;
}

void diep(char *s){
  perror(s);
  exit(1);
}
char *strip_headers(char *buf, int ltr){
	char * retBuf = (char *)malloc(ltr);
	memcpy(retBuf, buf + sizeof(ip) + sizeof(udphdr), ltr);
	return retBuf;
}
void rmode(){
  out_stream<<"Router mode initiated. Attempting a socket bind request..."<<endl;
  char buf[global_bufsize];
  struct sockaddr_in si_me, si_other;
  int s, i, slen=sizeof(si_other);
  s = create_p438_socket();
  while(1){
    int n = p438_recv(s, buf, 1028);
    cout << "Router: size received: " << n << endl;
    if (n==-1) diep("recvfrom()");
    cout <<"Router Received packet at: "<< get_time() <<endl; 
    out_stream<<"Router Received packet at: "<< get_time() <<endl; 
	char *buf_r = strip_headers(buf, 100);
    printf("Router Received packet with Data: %s\n\n",buf);
    out_stream<<"Router Received packet with Data: "<<buf_r<<endl;
    if(n > 0) {
		//Get the lookup value and use it not the following.
		  char *nxIP = "129.79.245.104";
		  cout<<"ROUTER: Attempting to reply to "<<nxIP<<endl;;
		  out_stream<<"ROUTER: Attempting to reply to "<<nxIP<<endl;;
		  unsigned long nextIP;
		  nextIP = inet_addr(nxIP);
		msleep(1000);
		char *ack = "Packet received. Continue if you have more.\n";
		int size = p438_send(s, ack, 1024, nextIP);
		cout<<"ROUTER: Send attempt finished. size =: "<< size <<endl;
    }
  }
  close(s);
}
			    
void hmode(){
  out_stream<<"EndHost mode initiated. Attempting a socket bind request..."<<endl;
  struct sockaddr_in si_other;
  int s, i, slen=sizeof(si_other);
  char *buf = read_send_file();
  //char *data = strip_headers(buf);
  cout<<endl<<buf<<endl;
 
  s = create_p438_socket();

  //TODO- Implement lookup
//Get the lookup value and use it not the following.
  char *nxIP = "129.79.245.101";
  unsigned long nextIP;
  nextIP = inet_addr(nxIP);
   
  msleep(1000);//sleep 1 second
  //send stuff
  int n = p438_send(s, buf, 1028, nextIP);
  cout << "HostMode size sent: " << n << endl;
  out_stream<< "HostMode size sent: " << n << endl;
  if(n==-1) diep("sendto()");
	
	close(s);
	s = create_p438_socket();
cout<<"End of Host SEND Mode. Switching to receive... *******"<<endl;
out_stream<<"End of Host SEND Mode. Switching to receive... *******"<<endl;
  //receive stuff
	char buf_r[global_bufsize];
    while(1){
	cout<<"HostMode ready to receive next packet..."<<endl;
	out_stream<<"HostMode ready to receive next packet..."<<endl;
    int n = p438_recv(s, buf_r, 1028);
    cout << "size received: " << n << endl;
    if (n==-1){ diep("recvfrom()");}
    cout <<"Host Received packet at: "<< get_time() <<endl; 
    out_stream <<"Host Received packet at: "<< get_time() <<endl; 
    printf("Host Received packet with Data: %s\n\n", buf_r);
    out_stream<<"Host Received packet with Data: "<<buf_r<<endl;
    }
  close(s);
}
