#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <fstream>
#include <string>//to support strings
#include <vector>//to support vecs
#include <sstream>
#include <cctype>
#include <ctype.h>
#include <unistd.h>
#include <netdb.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/param.h>

#include "gconfig.hpp"
#include "hclass.hpp"
#include "rclass.hpp"
#include "lclass.hpp"
#include "ehlclass.hpp"
#include "p438_server.hpp"
#include "virhead.hpp"

using namespace std;

void token_str(vector<string>& tokens, string str);//prototypes
int get_ehid_rip(string cur_ip);
string get_time();
string this_ip();
string global_dst_vir;
void parse_globals(vector<string> line_vals);
void parse_routers(vector<string> line_vals);
void parse_hosts(vector<string> line_vals);
void parse_rrlinks(vector<string> line_vals);
void parse_rhlinks(vector<string> line_vals); 
void read_cfg();

Global_Config cfg;
vector<Routers> r_inst;
vector<EndHosts> h_inst;
vector<Links> rr_inst;
vector<Ehlinks> rh_inst;

string this_ip(){
  char hostname[MAXHOSTNAMELEN];
  gethostname(hostname, MAXHOSTNAMELEN);
  //cout<<"host name: "<<hostname<<endl;
  hostent * record = gethostbyname(hostname);
  if (record == NULL){
    herror("gethostbyname failed.");
    exit(1);
  }
  in_addr * address = (in_addr *)record->h_addr;
  //cout<<"Main Address:"<<inet_ntoa(* address)<<endl;
  return inet_ntoa(* address);
}

char* itoa(int val, int base){

	static char buf[32] = {0};
	int i = 30;

	for(; val && i ; --i, val /= base)
		buf[i] = "0123456789abcdef"[val % base];
	return &buf[i+1];
}

char *read_send_file(string my_ip){
  ifstream in_stream;
  string cur_line;
  vector<string> header_values;
  int dest_port;
  int src_port;
  string src_ip;
  string dest_ip;
  char data[1000];
  bzero(data, 1000);
  int length;
  struct our_udp tmp_udp_head;
  struct our_ip tmp_ip_head;
  char * buf = (char *)malloc(1001 + sizeof(ip) + sizeof(udphdr));
  
  //search for send.txt file
	int my_ehid = get_ehid_rip(my_ip);
	string send_name = "send";
	string n;
	n = itoa(my_ehid, 10); //opening custom send.text, depending on which endhost it is
	//n =  strcat(n, "\0");    //e.g.  send4.txt, send5.txt, send6.txt
	send_name += n;
	send_name += ".txt";
	cout<<"send_name is: "<<send_name<<endl;
  in_stream.open(send_name.c_str());
  if(in_stream.fail()) {
    cout<<"Send file missing."<<endl;//nothing to send
    char *empty = "";
	return empty;
  }

  getline(in_stream, cur_line);//first line has header values
  //parse through the first line of send file
  token_str(header_values, cur_line);
  tmp_ip_head.ip_src.s_addr = inet_addr(this_ip().c_str());
  tmp_ip_head.ip_dst.s_addr = inet_addr(header_values[0].c_str());  
  global_dst_vir = header_values[0].c_str();
  tmp_udp_head.source = atoi(header_values[1].c_str());
  tmp_udp_head.dest = atoi(header_values[2].c_str());
  
  FILE * pFile;
  long lSize;
  char * buffer;
  size_t result;
  pFile = fopen(send_name,"rb");
  if(pFile == NULL){
	fputs("file error.",stderr);
	exit(1);
  }
  fseek(pFile,0,SEEK_END);
  lSize = ftell(pFile);
  rewind(pFile);
  
  buffer = (char*)malloc(sizeof(char)*lSize);
  if(buffer == NULL){
	fputs("Memory error.",stderr);
	exit(2);
  }
  result = fread(buffer,1,lSize,pFile);
  if(result != lSize){
	fputs("Read error.",stderr);
	exit(3);
  }

  memcpy(buf, &tmp_ip_head, sizeof(our_ip));
  memcpy(buf + sizeof(our_ip), &tmp_udp_head, sizeof(our_udp));
  memcpy(buf + sizeof(our_ip) + sizeof(our_udp), buffer, lSize);   
  
  return buf;
}
void read_cfg(){
//int main(int argc, char* argv[]){
  //ofstream out_stream;
  ifstream in_stream;
  string cur_line;
  string in_file;
  static int rnum = 0;
  static int hnum = 0;
  static int rrnum = 0;
  static int rhnum = 0;
  vector<string> line_vals;
  
  //cout<<"Please enter the name of the config file(WITHOUT extension): ";
  //cin>>in_file;//get name
  //in_file += ".txt";
  //in_stream.open(in_file.c_str());
	in_stream.open("ex_config.txt");
  if(in_stream.fail()){
    cout<<"Config file opening failed. Exiting."<<endl;
    exit(1);
  }else{  
	cout<<"Now reading configuration data."<<endl;
  }
  //while(!in_stream.eof()){
  while(getline(in_stream,cur_line)){
    //getline(in_stream, cur_line);//get entire line
    token_str(line_vals, cur_line);//tokenize the string
    int type = atoi(line_vals[0].c_str());
    switch(type){
    case 0:
      parse_globals(line_vals);
      cout<<"globals created."<<endl;
      break;
    case 1:
      parse_routers(line_vals);
      cout<<"routers updated"<<endl;
      break;
    case 2:
      parse_hosts(line_vals);
      cout<<"endhosts updated"<<endl;
      break;
    case 3:
      parse_rrlinks(line_vals);
      cout<<"rrlinks updated"<<endl;
      break;
    case 4:
      parse_rhlinks(line_vals);
      cout<<"rhlinks updated"<<endl;
      break;
    default:
      cout<<"Invalid type given. Reading next line."<<endl;
      break;
    }
    line_vals.clear();
  }
  
  cout<<"***"<<endl;
  cout<<"cfg qlen: "<<cfg.get_queue_len()<<endl;
  cout<<"cfg ttlval: "<<cfg.get_ttl_val()<<endl;
  cout<<"***"<<endl;
  for(int ri = 0; ri < r_inst.size(); ri++){
    cout<<"routers[ri] rid: "<<r_inst[ri].get_r_id()<<" extip: "<<r_inst[ri].get_ext_ip()<<endl;
  }
  cout<<"***"<<endl;
  for(int hi = 0; hi < h_inst.size(); hi++){
    cout<<"hosts[hi] ehid: "<<h_inst[hi].get_eh_id()<<" ex/vir tip: "<<h_inst[hi].get_ext_ip()<<"/"<<h_inst[hi].get_vir_ip()<<endl;
  }
  cout<<"***"<<endl;
  for(int li = 0; li < rr_inst.size(); li++){
    cout<<"router links[li] r1id: "<<rr_inst[li].get_r1_id()<<" delay: "<<rr_inst[li].get_delay()<<"\tr2id: "<<rr_inst[li].get_r2_id()<<endl;
  }
  cout<<"***"<<endl;
  for(int eli = 0; eli < rh_inst.size(); eli++){
    cout<<"router/endhost links[eli] rid: "<<rh_inst[eli].get_r_id()<<" delay: "<<rh_inst[eli].get_delay()
	<<" virtual id: "<< rh_inst[eli].get_vir_id()<<"\tehid: "<<rh_inst[eli].get_eh_id()<< endl;
  }
  cout<<"***"<<endl;
	this_ip();
	cout<<"***"<<endl;
  //out_stream.close();
  in_stream.close();
  //return 0;
}

void token_str(vector<string>& tokens, string str){
  string buf; //prep a buffer
  stringstream ss(str); //insert string into stream
  while(ss >> buf){
    tokens.push_back(buf);//add to vector
  }
}

void parse_globals(vector<string> line_vals){
  int qlen = atoi(line_vals[1].c_str());
  int ttlval = atoi(line_vals[2].c_str());	
  Global_Config cfg_r(qlen,ttlval);
  cfg = cfg_r;
}

void parse_routers(vector<string> line_vals){
  int r_id = atoi(line_vals[1].c_str());
  string ext_ip = line_vals[2];	
  Routers tmp_r(r_id,ext_ip);
  r_inst.push_back(tmp_r);
}

void parse_hosts(vector<string> line_vals){
  int eh_id = atoi(line_vals[1].c_str());
  string ext_ip = line_vals[2];	
  string vir_ip = line_vals[3];	
  EndHosts tmp_h(eh_id,ext_ip, vir_ip);
  h_inst.push_back(tmp_h);
}

void parse_rrlinks(vector<string> line_vals){
  int r1_id = atoi(line_vals[1].c_str());
  int r1_delay = atoi(line_vals[2].c_str());	
  int r2_id = atoi(line_vals[3].c_str());	
  int r2_delay = atoi(line_vals[4].c_str());	
  Links tmp_l(r1_id, r1_delay, r2_id);
  rr_inst.push_back(tmp_l);
  Links tmp_l2(r2_id, r2_delay, r1_id);
  rr_inst.push_back(tmp_l2);
}

void parse_rhlinks(vector<string> line_vals){
  int r_id = atoi(line_vals[1].c_str());
  int r_eh_delay = atoi(line_vals[2].c_str());	
  string vir_id = line_vals[3];
  int eh_id = atoi(line_vals[4].c_str());	
  int eh_r_delay = atoi(line_vals[5].c_str());	
  Ehlinks tmp_eh_l(r_id, r_eh_delay, vir_id, eh_id);
  rh_inst.push_back(tmp_eh_l);
  Ehlinks tmp_eh_l2(eh_id, eh_r_delay, "", r_id);
  rh_inst.push_back(tmp_eh_l2);
}

bool search_routers(string real_ip){
  bool is_router = false;
  vector<Routers>::iterator ri;
  for(ri = r_inst.begin(); ri < r_inst.end(); ri++) {
    if(real_ip == ri->ext_ip) {
      is_router = true;
    }
  }
  return is_router;
}

int get_routerid(string cur_ip){
	int rid;
	vector<Routers>::iterator ri;
	for(ri = r_inst.begin(); ri < r_inst.end(); ri++){
		if(cur_ip == ri->ext_ip){
			rid = ri->get_r_id();
		}
	}
	return rid;
}

int get_ehid(string dst_vir){
	cout<<"inside get_ehid with dst_vir: "<<dst_vir<<endl;
	int ehid;
	vector<EndHosts>::iterator hi;
	for(hi = h_inst.begin(); hi<h_inst.end(); hi++){
		if(dst_vir == hi->vir_ip){
			cout<<"dst/vir: "<<dst_vir<<"/"<<hi->vir_ip<<endl;
			ehid = hi->eh_id;
		}
	}
	return ehid;
}

string get_ehip(string dst_vir){
	string ehip;
	vector<EndHosts>::iterator hi;
	for(hi = h_inst.begin(); hi<h_inst.end(); hi++){
		if(dst_vir == hi->vir_ip){
			ehip = hi->ext_ip;
		}
	}
	return ehip;
}
int get_ehlinkid(int ehid){
	int linkid;
	vector<Ehlinks>::iterator hi;
	for(hi = rh_inst.begin(); hi<rh_inst.end(); hi++){
		if(ehid == hi->eh_id){
			linkid = hi->r_id;
		}
	}
	return linkid;
}
int get_ehid_rip(string cur_ip){
	int ehid;
	vector<EndHosts>::iterator hi;
	for(hi = h_inst.begin(); hi<h_inst.end(); hi++){
		if(cur_ip == hi->ext_ip){
			ehid = hi->eh_id;
		}
	}
	return ehid;
}

string get_rip(int rid){
	string rip;
	vector<Routers>::iterator ri;
	for(ri = r_inst.begin(); ri<r_inst.end(); ri++){
		if(rid == ri->r_id){
			rip = ri->ext_ip;
		}
	}
	return rip;
}

bool search_end_hosts(string real_ip){
  bool is_endhost = false;
  vector<EndHosts>::iterator hi;
  for(hi = h_inst.begin(); hi < h_inst.end(); hi++) {
    cout << hi->eh_id << " " << hi->ext_ip << " " << hi->vir_ip <<endl;
    if(real_ip == hi->ext_ip) {
      is_endhost = true;
    }
  }
  return is_endhost;
}

string next_hop(string dst_vir, string cur_ip){
	//get get eh_id from dst_vir
	cout << "in next_hop with dst_vir: " << dst_vir << " cur_ip: " << cur_ip << endl;
	int dst_id = get_ehid(dst_vir);
	cout<<"dst id: "<<dst_id<<endl;
	int tar_id;
	switch(dst_id){
		case 4:
			cout<<"creating path to eh4"<<endl;
			//get r_id from cur_ip
			tar_id = get_routerid(cur_ip);
			switch(tar_id){
				case 1:
					return get_ehip(dst_vir);
				case 2:
					return get_rip(1);
				case 3:
					return get_rip(1);
				default:
					return "127.0.0.1";
			}
		case 5:
			cout<<"creating path to eh5"<<endl;
			//get r_id from cur_ip
			tar_id = get_routerid(cur_ip);
			cout<<"tar_id: " << tar_id <<endl;
			switch(tar_id){
				case 1:
					return get_rip(2);
				case 2:
					return get_ehip(dst_vir);
				case 3:
					return get_rip(2);
				default:
					return "127.0.0.1";
			}
		case 6:
			tar_id = get_routerid(cur_ip);
			switch(tar_id){
				case 1:
					return get_rip(3);
				case 2:
					return get_rip(3);
				case 3:
					return get_ehip(dst_vir);
				default:
					return "127.0.0.1";
			}
		default:
			return "127.0.0.1";
	}
}



string get_eh_ip(int eh_id){
	for(int i = 0; i < sizeof(h_inst); i++){
		if(h_inst.at(i).get_eh_id() == eh_id){
			return h_inst.at(i).get_ext_ip();
		}
	}
	return "127.0.0.1";
}
